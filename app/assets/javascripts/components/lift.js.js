// Generated by CoffeeScript 1.10.0
(function() {
  var coefficients;

  coefficients = {
    1: 1,
    2: .943,
    3: .906,
    4: .881,
    5: .851,
    6: .831,
    7: .807,
    8: .786,
    9: .765,
    10: .744
  };

  this.Lift = React.createClass({
    getInitialState: function() {
      return {
        edit: false,
        onerm: this.props.lift.onerm,
        ismetric: this.props.lift.ismetric
      };
    },
    handleToggle: function(e) {
      e.preventDefault();
      return this.setState({
        edit: !this.state.edit
      });
    },
    handleDelete: function(e) {
      e.preventDefault();
      return $.ajax({
        method: 'DELETE',
        url: "/lifts/" + this.props.lift.id,
        dataType: 'JSON',
        success: (function(_this) {
          return function() {
            return _this.props.handleDeleteLift(_this.props.lift);
          };
        })(this)
      });
    },
    handleEdit: function(e) {
      var data;
      e.preventDefault();
      data = {
        date: ReactDOM.findDOMNode(this.refs.date).value,
        liftname: ReactDOM.findDOMNode(this.refs.liftname).value,
        weightlifted: ReactDOM.findDOMNode(this.refs.weightlifted).value,
        ismetric: this.state.ismetric,
        respsperformed: ReactDOM.findDOMNode(this.refs.respsperformed).value,
        onerm: this.state.onerm
      };
      return $.ajax({
        method: 'PUT',
        url: "/lifts/" + this.props.lift.id,
        dataType: 'JSON',
        data: {
          lift: data
        },
        success: (function(_this) {
          return function(data) {
            _this.setState({
              edit: false
            });
            return _this.props.handleEditLift(_this.props.lift, data);
          };
        })(this)
      });
    },
    reCalculateOneRm: function() {
      return this.setState({
        onerm: this.getOneRm(ReactDOM.findDOMNode(this.refs.weightlifted).value, ReactDOM.findDOMNode(this.refs.respsperformed).value)
      });
    },
    getOneRm: function(weight, reps) {
      if (weight && reps > 0 && reps < 11) {
        return weight / coefficients[reps];
      } else {
        return 0;
      }
    },
    toggleUnit: function(e) {
      e.preventDefault();
      return this.setState({
        ismetric: !this.state.ismetric
      });
    },
    liftRow: function() {
      return React.DOM.tr(null, React.DOM.td(null, this.props.lift.date), React.DOM.td(null, this.props.lift.liftname), React.DOM.td(null, this.props.lift.weightlifted), React.DOM.td(null, this.props.lift.respsperformed), React.DOM.td(null, this.props.lift.onerm), React.DOM.td(null, this.props.lift.ismetric.toString()), React.DOM.td(null, React.DOM.button({
        className: 'btn btn-primary',
        onClick: this.handleToggle
      }, 'Edit'), React.DOM.button({
        className: 'btn btn-danger',
        onClick: this.handleDelete
      }, 'Delete')));
    },
    liftForm: function() {
      return React.DOM.tr(null, React.DOM.td(null, React.DOM.input({
        className: 'form-control',
        type: 'date',
        defaultValue: this.props.lift.date,
        ref: 'date'
      })), React.DOM.td(null, React.DOM.input({
        className: 'form-control',
        type: 'text',
        defaultValue: this.props.lift.liftname,
        ref: 'liftname'
      })), React.DOM.td(null, React.DOM.input({
        className: 'form-control',
        type: 'number',
        defaultValue: this.props.lift.weightlifted,
        ref: 'weightlifted',
        onChange: this.reCalculateOneRm
      })), React.DOM.td(null, React.DOM.input({
        className: 'form-control',
        type: 'number',
        min: '1',
        max: '10',
        defaultValue: this.props.lift.respsperformed,
        ref: 'respsperformed',
        onChange: this.reCalculateOneRm
      })), React.DOM.td(null, this.state.onerm), React.DOM.td(null, React.DOM.button({
        className: 'btn btn-primary',
        onClick: this.toggleUnit
      }, 'Metric = ' + this.state.ismetric.toString())), React.DOM.td(null, React.DOM.button({
        className: 'btn btn-primary',
        onClick: this.handleEdit
      }, 'Update'), React.DOM.button({
        className: 'btn btn-danger',
        onClick: this.handleToggle
      }, 'Cancel')));
    },
    render: function() {
      if (this.state.edit) {
        return this.liftForm();
      } else {
        return this.liftRow();
      }
    }
  });

}).call(this);
